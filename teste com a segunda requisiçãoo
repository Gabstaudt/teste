import { Injectable } from '@angular/core'; 
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';

@Injectable({
  providedIn: 'root' 
})
export class AuthService {
 
  private apiUrl = 'http://10.20.96.221:8043/dados';
  private segundaApiUrl = 'http://10.20.96.221:8043/segundaRequisicao'; // URL da segunda requisição

  constructor(private http: HttpClient) {}

  // realizar o login, recebendo usuário e senha
  login(username: string, password: string): Observable<any> {
    const AppCommand = 240;   
    const Plataform = 3;     
    const Version = 1;       
    const GadjetID = biri();  

    const headers = new HttpHeaders({
      'Content-Type': 'application/x-www-form-urlencoded' 
    });

    const salt = 'super teste do carai';
    const passwordHash = this.encryptPassword(password, salt); 

    const appCommandBytes = this.numberToBytes({ num: AppCommand }).subarray(3);
    const plataformBytes = this.numberToBytes({ num: Plataform }).subarray(3);
    const versionBytes = this.versionToBytes(Version);
    const gadjetIDBytes = this.encodeWithLength(GadjetID);
    const usernameBytes = this.encodeWithLength(username);
    const passwordBytes = this.encodeWithLength(passwordHash);

    const combinedBytes = new Uint8Array(
      appCommandBytes.length +
      plataformBytes.length +
      versionBytes.length +
      gadjetIDBytes.length +
      usernameBytes.length +
      passwordBytes.length
    );

    let offset = 0;
    combinedBytes.set(appCommandBytes, offset);
    offset += appCommandBytes.length;
    combinedBytes.set(plataformBytes, offset);
    offset += plataformBytes.length;
    combinedBytes.set(versionBytes, offset);
    offset += versionBytes.length;
    combinedBytes.set(gadjetIDBytes, offset);
    offset += gadjetIDBytes.length;
    combinedBytes.set(usernameBytes, offset);
    offset += usernameBytes.length;
    combinedBytes.set(passwordBytes, offset);

    // Realiza a primeira requisição de login
    return this.http.post(this.apiUrl, combinedBytes.buffer, { headers, responseType: 'arraybuffer' }).pipe(
      map(response => {
        const byteArray = new Uint8Array(response);
        const parsedResponse = this.parseLoginResponse(byteArray);

        if (parsedResponse) {
          localStorage.setItem('SessaoID', parsedResponse.SessaoID);
          localStorage.setItem('IdUsuario', parsedResponse.IdUsuario.toString());
          // Armazena os dados da sessão e outros no local storage
        }

        return parsedResponse;
      }),
      switchMap(loginResponse => {
        if (loginResponse && loginResponse.respostaOK === 200) {
          const comandoSupervisao = 254; // Comando decimal 254
          const comandoLeituraEstrutura = 237; // Comando decimal 237
          const sessaoID = loginResponse.SessaoID; // SessaoID da resposta do login
          
          const comandoBytes = this.numberToBytes({ num: comandoSupervisao }).subarray(3);
          const leituraEstruturaBytes = this.numberToBytes({ num: comandoLeituraEstrutura }).subarray(3);

          // Converte a SessaoID em um array de bytes, com os 2 primeiros bytes declarando o tamanho
          const sessaoIDBytes = this.encodeWithLength(sessaoID);

          // Monta o pacote para a segunda requisição
          const combinedSegundaRequisicao = new Uint8Array(
            comandoBytes.length +
            leituraEstruturaBytes.length +
            sessaoIDBytes.length
          );

          // Preenche o array com os comandos e o SessaoID
          let offsetSegundaReq = 0;
          combinedSegundaRequisicao.set(comandoBytes, offsetSegundaReq);
          offsetSegundaReq += comandoBytes.length;
          combinedSegundaRequisicao.set(sessaoIDBytes, offsetSegundaReq);
          offsetSegundaReq += sessaoIDBytes.length;
          combinedSegundaRequisicao.set(leituraEstruturaBytes, offsetSegundaReq);

          // Envia a segunda requisição
          return this.http.post(this.segundaApiUrl, combinedSegundaRequisicao.buffer, { headers, responseType: 'arraybuffer' }).pipe(
            map(secondResponse => {
              const secondByteArray = new Uint8Array(secondResponse);
              // Processa a segunda resposta (se necessário)
              return secondByteArray; // Retorna o resultado da segunda requisição
            }),
            catchError(error => {
              console.error('Erro na segunda requisição', error);
              return throwError(() => error);
            })
          );
        } else {
          return throwError(() => new Error('Login falhou'));
        }
      }),
      catchError(error => {
        console.error('Erro ao fazer login', error);
        return throwError(() => error);
      })
    );
  }

  // Função para interpretar a resposta do login
  private parseLoginResponse(bytes: Uint8Array): LoginResponse {
    let offset = 0;
    const respostaOK = bytes[offset];
    offset += 1;
    const IdUsuario = this.bytesToInt32(bytes.slice(offset, offset + 4));
    offset += 4;
    const nomeUsuarioLength = (bytes[offset] << 8) | bytes[offset + 1];
    offset += 2;
    const NomeUsuario = this.bytesToString(bytes.slice(offset, offset + nomeUsuarioLength));
    offset += nomeUsuarioLength;
    const PrivilegioUsuario = this.bytesToInt32(bytes.slice(offset, offset + 4));
    offset += 4;
    const UnidadeUsuario = this.bytesToInt32(bytes.slice(offset, offset + 4));
    offset += 4;
    const AcessoProducao = bytes[offset];
    offset += 1;
    const AcessoEmpresa1 = bytes[offset];
    offset += 1;
    const AcessoEmpresa2 = bytes[offset];
    offset += 1;
    const SessaoIDLength = (bytes[offset] << 8) | bytes[offset + 1];
    offset += 2;
    const SessaoID = this.bytesToString(bytes.slice(offset, offset + SessaoIDLength));

    return {
      respostaOK,
      IdUsuario,
      NomeUsuario,
      PrivilegioUsuario,
      UnidadeUsuario,
      AcessoProducao,
      AcessoEmpresa1,
      AcessoEmpresa2,
      SessaoID
    };
  }

  // Demais funções auxiliares (encryptPassword, encodeWithLength, etc.) permanecem as mesmas...
}
