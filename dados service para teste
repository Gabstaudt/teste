import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class TerceiraRequisicaoService {

  private apiUrl = 'http://172.74.0.167:8043/dados'; 

  constructor(private http: HttpClient) {}

  enviarComandoSalvar(sessaoId: string): Observable<any> {
    const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded' });
    const comandoSupervisao = 254;
    const comandoLerDados = 236;

    const body = this.gerarBytesRequisicao(sessaoId, comandoSupervisao, comandoLerDados);
    console.log('Corpo da terceira requisição (bytes):', body);

    return this.http.post(this.apiUrl, body, { headers, responseType: 'arraybuffer' }).pipe(
      map(response => this.processarResposta(response)), 
      catchError(err => {
        console.error('Erro na terceira requisição:', err);
        return throwError(() => new Error('Erro na terceira requisição'));
      })
    );
  }

  private gerarBytesRequisicao(sessaoId: string, comandoSupervisao: number, comandoLerDados: number): ArrayBuffer {
    const sessaoIdBytes = this.encodeWithLength(sessaoId);
    const comandoSupervisaoBytes = new Uint8Array([comandoSupervisao]);
    const comandoLerDadosBytes = new Uint8Array([comandoLerDados]);

    const combinedBytes = new Uint8Array(comandoSupervisaoBytes.length + sessaoIdBytes.length + comandoLerDadosBytes.length);
    combinedBytes.set(comandoSupervisaoBytes, 0);
    combinedBytes.set(sessaoIdBytes, comandoSupervisaoBytes.length);
    combinedBytes.set(comandoLerDadosBytes, comandoSupervisaoBytes.length + sessaoIdBytes.length);

    return combinedBytes.buffer;
  }

  private encodeWithLength(str: string): Uint8Array {
    const stringBytes = new TextEncoder().encode(str);
    const length = stringBytes.length;

    const lengthBytes = new Uint8Array(2);
    lengthBytes[0] = (length >> 8) & 0xff;
    lengthBytes[1] = length & 0xff;

    const combined = new Uint8Array(lengthBytes.length + stringBytes.length);
    combined.set(lengthBytes, 0);
    combined.set(stringBytes, lengthBytes.length);

    return combined;
  }

  private processarResposta(buffer: ArrayBuffer): any {
    let offset = 0; 
    const dataView = new DataView(buffer);

    const respostaOK = dataView.getUint8(offset);
    console.log('Resposta de status:', respostaOK); 
    offset += 1;

    const atualizacaoDisponivel = dataView.getUint8(offset);
    console.log('Resposta de att:', atualizacaoDisponivel); 
    offset += 1;

    const quantidadeSetores = dataView.getUint16(offset);
    console.log('Quantidade de setores:', quantidadeSetores); 
    offset += 2;

    const setores: any[] = [];

    // Laço 1: Processa cada setor
    for (let i = 0; i < quantidadeSetores; i++) {
      const idSetor = dataView.getUint16(offset); 
      offset += 2;

      const tempoInformacao = Number(dataView.getBigUint64(offset)); 
      offset += 8;

      const status = dataView.getUint8(offset); 
      offset += 1;

      const quantidadeInteiros = dataView.getUint8(offset); 
      offset += 1;

      const quantidadeBooleanos = dataView.getUint8(offset); 
      offset += 1;

      const quantidadeAlarmes = dataView.getUint8(offset); 
      offset += 1;

      const inteiros: { id: number, valor: number }[] = [];
      const booleanos: { id: number }[] = [];
      const alarmes: { id: number, tempo: Date }[] = [];

      // Laço 2: Processa as tags inteiras
      for (let j = 0; j < quantidadeInteiros; j++) {
        const idTagInteira = dataView.getUint16(offset); 
        offset += 2;
        const valorTagInteira = dataView.getUint32(offset); 
        offset += 4;
        inteiros.push({ id: idTagInteira, valor: valorTagInteira });
      }

      // Laço 3: Processa as tags booleanas
      for (let j = 0; j < quantidadeBooleanos; j++) {
        const idTagBooleana = dataView.getUint16(offset);
        offset += 2;
        booleanos.push({ id: idTagBooleana });
      }

      // Laço 4: Processa os valores booleanos em bits
      const quantidadeBytesBooleanos = Math.ceil(quantidadeBooleanos / 8);
      const valoresBooleanos: boolean[] = [];
      for (let j = 0; j < quantidadeBytesBooleanos; j++) {
        const byteValores = dataView.getUint8(offset);
        offset += 1;
        for (let bit = 0; bit < 8 && (j * 8 + bit) < quantidadeBooleanos; bit++) {
          valoresBooleanos.push((byteValores & (1 << bit)) !== 0);
        }
      }

      // Laço 5: Processa os alarmes
      for (let j = 0; j < quantidadeAlarmes; j++) {
        const idAlarme = dataView.getUint16(offset); 
        offset += 2;
        const tempoAlarme = Number(dataView.getBigUint64(offset)); 
        offset += 8;
        alarmes.push({ id: idAlarme, tempo: new Date(tempoAlarme * 1000) });
      }

      const quantidadeBytesAlarmes = Math.ceil(quantidadeAlarmes / 8);
      const valoresAlarmes: boolean[] = [];
      for (let j = 0; j < quantidadeBytesAlarmes; j++) {
        const byteValores = dataView.getUint8(offset); 
        offset += 1;
        for (let bit = 0; bit < 8 && (j * 8 + bit) < quantidadeAlarmes; bit++) {
          valoresAlarmes.push((byteValores & (1 << bit)) !== 0);
          
        }
      }

      setores.push({
        id: idSetor,
        tempoInformacao: new Date(tempoInformacao * 1000),
        status: status,
        inteiros: inteiros,
        booleanos: booleanos,
        valoresBooleanos: valoresBooleanos,
        alarmes: alarmes
        
      });
      console.log("setores", setores)
    }

    return setores; 
  }
}
