import { Injectable } from '@angular/core'; 
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import CryptoJS from 'crypto-js';
import biri from 'biri';

// Interface que representa a estrutura da resposta do login
interface LoginResponse {
  respostaOK: number;          // Indica se a resposta foi bem-sucedida
  IdUsuario: number;           // ID do usuário
  NomeUsuario: string;         // Nome do usuário
  PrivilegioUsuario: number;   // Nível de privilégio do usuário
  UnidadeUsuario: number;      // Unidade do usuário
  AcessoProducao: number;      // Acesso à produção
  AcessoEmpresa1: number;      // Acesso à empresa 1
  AcessoEmpresa2: number;      // Acesso à empresa 2
  SessaoID: string;            // ID da sessão
}

@Injectable({
  providedIn: 'root' // Indica que o serviço pode ser injetado em qualquer lugar da aplicação
})
export class AuthService {
  // URL da API para autenticação
  private apiUrl = 'http://10.20.96.221:8043/dados';

  constructor(private http: HttpClient) {} // Injeta o HttpClient para fazer requisições HTTP

  // Método para realizar o login, recebendo usuário e senha
  login(username: string, password: string): Observable<LoginResponse> {
    const AppCommand = 240;   // Comando da aplicação
    const Plataform = 3;      // Plataforma do dispositivo
    const Version = 1;        // Versão da aplicação
    const GadjetID = biri();  // ID único do gadget, gerado pela biblioteca 'biri'

    // Define os cabeçalhos para a requisição HTTP
    const headers = new HttpHeaders({
      'Content-Type': 'application/x-www-form-urlencoded'
    });

    // Salt usado para criptografar a senha
    const salt = 'super teste do carai';
    const passwordHash = this.encryptPassword(password, salt); // Criptografa a senha

    // Converte os comandos e parâmetros em arrays de bytes
    const appCommandBytes = this.numberToBytes({ num: AppCommand }).subarray(3);
    const plataformBytes = this.numberToBytes({ num: Plataform }).subarray(3);
    const versionBytes = this.versionToBytes(Version);
    const gadjetIDBytes = this.encodeWithLength(GadjetID);
    const usernameBytes = this.encodeWithLength(username);
    const passwordBytes = this.encodeWithLength(passwordHash);

    // Combina todos os arrays de bytes em um único array
    const combinedBytes = new Uint8Array(
      appCommandBytes.length +
      plataformBytes.length +
      versionBytes.length +
      gadjetIDBytes.length +
      usernameBytes.length +
      passwordBytes.length
    );

    // Preenche o array combinado com os bytes individuais
    let offset = 0; // Inicializa o deslocamento
    combinedBytes.set(appCommandBytes, offset);
    offset += appCommandBytes.length;
    combinedBytes.set(plataformBytes, offset);
    offset += plataformBytes.length;
    combinedBytes.set(versionBytes, offset);
    offset += versionBytes.length;
    combinedBytes.set(gadjetIDBytes, offset);
    offset += gadjetIDBytes.length;
    combinedBytes.set(usernameBytes, offset);
    offset += usernameBytes.length;
    combinedBytes.set(passwordBytes, offset);

    // Envia a requisição POST e processa a resposta
    return this.http.post(this.apiUrl, combinedBytes.buffer, { headers, responseType: 'arraybuffer' }).pipe(
      map(response => {
        const byteArray = new Uint8Array(response); // Converte a resposta em um array de bytes
        // Chama a função para interpretar os bytes da resposta
        const parsedResponse = this.parseLoginResponse(byteArray);
        
        // Armazena os dados do usuário no localStorage
        if (parsedResponse) {
          localStorage.setItem('SessaoID', parsedResponse.SessaoID);
          localStorage.setItem('IdUsuario', parsedResponse.IdUsuario.toString());
          localStorage.setItem('NomeUsuario', parsedResponse.NomeUsuario); 
          localStorage.setItem('PrivilegioUsuario', parsedResponse.PrivilegioUsuario.toString());
          localStorage.setItem('UnidadeUsuario', parsedResponse.UnidadeUsuario.toString());
          localStorage.setItem('AcessoProducao', parsedResponse.AcessoProducao.toString());
          localStorage.setItem('AcessoEmpresa1', parsedResponse.AcessoEmpresa1.toString());
          localStorage.setItem('AcessoEmpresa2', parsedResponse.AcessoEmpresa2.toString());
        }

        return parsedResponse; // Retorna a resposta analisada
      }),
      catchError(error => {
        console.error('Erro ao fazer login', error); // Loga o erro no console
        return throwError(() => error); // Lança o erro
      })
    );
  }

  // Função para interpretar os bytes da resposta do login
  private parseLoginResponse(bytes: Uint8Array): LoginResponse {
    let offset = 0; // Inicializa o deslocamento

    // 1 byte: respostaOK - indica o status da resposta
    const respostaOK = bytes[offset];
    offset += 1; // Avança o deslocamento

    // 4 bytes: IdUsuario (Big-endian) - ID do usuário
    const IdUsuario = this.bytesToInt32(bytes.slice(offset, offset + 4));
    offset += 4;

    // 2 bytes: comprimento do NomeUsuario
    const nomeUsuarioLength = (bytes[offset] << 8) | bytes[offset + 1];
    offset += 2;

    // A seguir, lemos o NomeUsuario com o comprimento especificado
    const NomeUsuario = this.bytesToString(bytes.slice(offset, offset + nomeUsuarioLength));
    offset += nomeUsuarioLength; // Avança o deslocamento com base no comprimento do NomeUsuario

    // 4 bytes: PrivilegioUsuario - nível de privilégio do usuário
    const PrivilegioUsuario = this.bytesToInt32(bytes.slice(offset, offset + 4));
    offset += 4;

    // 4 bytes: UnidadeUsuario - unidade do usuário
    const UnidadeUsuario = this.bytesToInt32(bytes.slice(offset, offset + 4));
    offset += 4;

    // 1 byte: AcessoProducao - acesso à produção
    const AcessoProducao = bytes[offset];
    offset += 1;

    // 1 byte: AcessoEmpresa1 - acesso à empresa 1
    const AcessoEmpresa1 = bytes[offset];
    offset += 1;

    // 1 byte: AcessoEmpresa2 - acesso à empresa 2
    const AcessoEmpresa2 = bytes[offset];
    offset += 1;

    // 32 bytes: SessaoID (UTF-8 string) - ID da sessão do usuário
    const SessaoID = this.bytesToString(bytes.slice(offset, offset + 34));

    // Retorna o objeto mapeado com todos os dados
    return {
      respostaOK,
      IdUsuario,
      NomeUsuario,
      PrivilegioUsuario,
      UnidadeUsuario,
      AcessoProducao,
      AcessoEmpresa1,
      AcessoEmpresa2,
      SessaoID
    };
  }

  // Função para converter 4 bytes em um inteiro (Big-endian)
  private bytesToInt32(bytes: Uint8Array): number {
    return (bytes[0] << 24) | (bytes[1] << 16) | (bytes[2] << 8) | bytes[3];
  }

  // Função para converter um array de bytes em uma string (UTF-8)
  private bytesToString(bytes: Uint8Array): string {
    return new TextDecoder('utf-8').decode(bytes);
  }

  // Função para criptografar a senha com um salt
  private encryptPassword(password: string, salt: string): string {
    const saltedPassword = password + salt; // Combina a senha com o salt
    const hash = CryptoJS.SHA256(saltedPassword); // Gera o hash usando SHA256
    return CryptoJS.enc.Base64.stringify(hash); // Retorna o hash em formato Base64
  }

  // Função para codificar uma string com o comprimento em bytes
  private encodeWithLength(str: string): Uint8Array {
    const stringBytes = new TextEncoder().encode(str); // Converte a string em bytes
    const length = stringBytes.length; // Obtém o comprimento da string

    // Cria um array para armazenar o comprimento em 2 bytes
    const lengthBytes = new Uint8Array(2);
    lengthBytes[0] = (length >> 8) & 0xff; // byte mais significativo
    lengthBytes[1] = length & 0xff;       // byte menos significativo

    // Combina os bytes do comprimento e da string
    const combined = new Uint8Array(lengthBytes.length + stringBytes.length);
    combined.set(lengthBytes, 0); // Adiciona os bytes do comprimento
    combined.set(stringBytes, lengthBytes.length); // Adiciona os bytes da string
    return combined; // Retorna o array combinado
  }

  // Função para converter um número em um array de 4 bytes
  private numberToBytes({ num }: { num: number; }): Uint8Array {
    const byteArray = new Uint8Array(4);
    for (let i = 0; i < 4; i++) {
      byteArray[3 - i] = (num >> (i * 8)) & 0xff; // Armazena em ordem Big-endian
    }
    return byteArray; // Retorna o array de bytes
  }

  // Função para converter a versão em um array de 2 bytes
  private versionToBytes(version: number): Uint8Array {
    const byteArray = new Uint8Array(2);
    byteArray[0] = (version >> 8) & 0xff; // byte mais significativo
    byteArray[1] = version & 0xff;       // byte menos significativo
    return byteArray; // Retorna o array de bytes
  }
}
